AWSTemplateFormatVersion: 2010-09-09

Description:  This script deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  KeyName:
    Description: ssh key to connect to the server
    Type: AWS::EC2::KeyPair::KeyName

  EnvironmentName:
    Description: Name your project
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  InstanceTypeParameter: 
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.nano
      - t3.micro
    Description: Enter t2.micro, t2.nano, or t3.micro. Default is t2.micro.

  InstanceMinSizeRequirement:
    Description: Please enter the Minimum number of instances required.
    Type: String
    Default: 2
  
  InstanceMaxSizeRequirement:
    Description: Please enter the Maximum number of instances required.
    Type: String
    Default: 2
  
  InstanceDesiredSizeRequirement:
    Description: Please enter the Desired number of instances required.
    Type: String
    Default: 2

  AmiId:
    Type: String
    Default: ami-03657b56516ab7912
    AllowedValues:
      - ami-0947d2ba12ee1ff75
      - ami-0e4035ae3f70c400f
      - ami-03657b56516ab7912
      - ami-0528a5175983e7f28

#Mappings:
#  RegionMap:
#    us-east-1:
#      AMI: ami-0947d2ba12ee1ff75
#    us-west-1:
#      AMI: ami-0e4035ae3f70c400f
#    us-east-2:
#      AMI: ami-03657b56516ab7912
#    us-west-2:
#      AMI: ami-0528a5175983e7f28

Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR 
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName 
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName 

  VpcGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes  

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ContainerSecurityGroup
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ecscluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: ecscluster
  
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: !Ref InstanceMinSizeRequirement
      MaxSize: !Ref InstanceMinSizeRequirement
      DesiredCapacity: !Ref InstanceDesiredSizeRequirement

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiId
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      InstanceType: !Ref InstanceTypeParameter
      IamInstanceProfile: !Ref 'EC2InstanceProfile'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource: '*'

Outputs:
  MyVpc:
    Description: A reference to the created VPC
    Value: !Ref MyVpc

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  
